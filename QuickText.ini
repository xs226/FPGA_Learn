[1]
php=<?php\n$\n?>
[19]
//=/* $ */
[2]
case=case $: $\n$
def=#define $\n$
default=default $: $\n$
dowhile=do\n{\n	$\n}\nwhile ($);\n$
dowhiles=do\n	$\nwhile ($);\n$
else=else\n{\n	$\n}\n$
elseif=else if ($)\n{\n	$\n}\n$
elseifs=else if ($)\n	$\n$
elses=else\n	$\n$
for=for ($;$;$)\n{\n	$\n}\n$
fors=for ($;$;$)\n	$\n$
func=$ $($)\n{\n	$\n	return $;\n}\n$
if=if ($)\n{\n	$\n}\n$
ifelse=if ($)\n{\n	$\n}\nelse\n{\n	$\n}\n$
ifelses=if ($)\n{\n	$\n}\nelse\n	$\n$
ifs=if ($)\n	$\n$
ifselse=if ($)\n	$\nelse\n{\n	$\n}\n$
ifselses=if ($)\n	$\nelse\n	$\n$
inc=#include <$>\n$
incl=#include "$"\n$
main=int main(int argc, char* argv[])\n{\n	$\n}\n
switch=switch ($)\n{\n	$\n}\n$
while=while ($)\n{\n	$\n}\n$
whiles=while ($)\n	$\n$
[20]
a=a {\n	$\n}
body=body {\n	$\n}
{={\n	$\n}
[3]
case=case $: $\n$
class=class $ {\nprivate:\n	$\nprotected:\n	$\npublic:\n	$\n};\n$
def=#define $\n$
default=default $: $\n$
dowhile=do\n{\n	$\n}\nwhile ($);\n$
dowhiles=do\n	$\nwhile ($);\n$
else=else\n{\n	$\n}\n$
elseif=else if ($)\n{\n	$\n}\n$
elseifs=else if ($)\n	$\n$
elses=else\n	$\n$
for=for ($;$;$)\n{\n	$\n}\n$
fors=for ($;$;$)\n	$\n$
func=$ $($)\n{\n	$\n	return $;\n}\n$
hclass=#ifndef $\n#define $\n\nclass $ {\nprivate:\n	$\nprotected:\n	$\npublic:\n	$\n};\n\n#endif\n$
if=if ($)\n{\n	$\n}\n$
ifelse=if ($)\n{\n	$\n}\nelse\n{\n	$\n}\n$
ifelses=if ($)\n{\n	$\n}\nelse\n	$\n$
ifs=if ($)\n	$\n$
ifselse=if ($)\n	$\nelse\n{\n	$\n}\n$
ifselses=if ($)\n	$\nelse\n	$\n$
inc=#include <$>\n$
incl=#include "$"\n$
main=int main(int argc, char* argv[])\n{\n	$\n}\n
switch=switch ($)\n{\n	$\n}\n$
while=while ($)\n{\n	$\n}\n$
whiles=while ($)\n	$\n$
[43]
case=case(  )\n  	0 :  ;\n  	1 :  ;\n  	default:  ;\nendcase
for=integer i;	\nfor(i=0;i<5;i=i+1)begin\n	din= {$random}%10;\n	#(1*CYCLE);\nend
fsm=parameter  IDLE    =  4'd0,\n		   STATE1  =  4'd1,\n		   STATE2  =  4'd2,\n		   STATE3  =  4'd3,\n		   STATE4  =  4'd4,\n		   STATE5  =  4'd5,\n		   STATE6  =  4'd6,\n		   STATE7  =  4'd7;\n		   \nreg[3:0] current_state;\nreg[3:0] next_state;\n\nalways@(posedge clk or negedge rst_n)begin\n    if(rst_n==1'b0)begin\n        current_state<=IDLE;\n    end\n    else begin\n        current_state<=next_state;\n    end\nend\n\nalways@(*)begin\n    case(current_state)\n		IDLE:	if() next_state= STATE1  ;\n				else next_state=current_state ;		\n		STATE1: if() next_state= STATE1  ;\n				else next_state=current_state ;\n		STATE2: if() next_state= STATE1  ;\n				else next_state=current_state ;\n		STATE3: if() next_state= STATE1  ;\n				else next_state=current_state ;\n		STATE4: if() next_state= STATE1  ;\n				else next_state=current_state ;\n		STATE5: if() next_state= STATE1  ;\n				else next_state=current_state ;		\n	    default:next_state=IDLE;\nendcase\nend\n\nalways@(posedge clk or negedge rst_n)begin\n    if(rst_n==1'b0)begin\n        \n    end\n    else begin\n        \n    end\nend
generate=genvar i;\ngenerate\n    for(i=0;i<SIZE;i=i+1)begin:module_n\n        mudule_name  #(.parameter(a),.parameter(b) )  uut_name(\n            .rst_n(rst_n),\n            .clk(clk),\n            .din1(din1),\n            .din2(din2), \n            \n            .dout1(dout1),\n            .dout2(dout2)\n        );\n       end\nendgenerate\n
jishuqi=parameter TIME_s = 5_000_000 ;\nreg[23:0] cnt_s;\n\nalways @(posedge clk or negedge rst_n)begin\n    if(!rst_n)begin\n        cnt_s <= 0;\n    end\n    else if(  ) begin\n        if(  && cnt_s==TIME_s-1) cnt_s <= 0;\n        else cnt_s <= cnt_s + 1;\n    end\nend
lihua=mudule_name  #(.parameter(a),.parameter(b) )  uut_name(\n	.rst_n(rst_n),\n	.clk(clk),\n	.din1(din1),\n	.din2(din2), \n	\n	.dout1(dout1),\n	.dout2(dout2)\n	);
module=module module_name (\n	clk ,\n	rst_n ,\n	din ,\n	dout\n);\n\ninput clk ;\ninput rst_n ;\ninput [ DATA_W-1:0] din ;\noutput[ DATA_W-1:0] dout ;\nreg[ DATA_W-1:0] dout ;\n\nparameter DATA_W = 8 ;\n\nalways@(posedge clk or negedge rst_n)begin\n    if(rst_n==1'b0)begin\n        \n    end\n    else if() begin\n        \n    end\nend\n\nalways@(posedge clk or negedge rst_n)begin\n    if(rst_n==1'b0)begin\n        \n    end\n    else if() begin\n        \n    end\nend\n\nendmodule
name=virtual type {\n{8'b00000011 DATA0}\n{8'b11110011 DATA1}\n{8'b00100101 DATA2}\n{8'b00001101 DATA3}\n{8'b10011001 DATA4}\n{8'b01001001 DATA5}\n{8'b01000001 DATA6}\n{8'b00011111 DATA7}\n{8'b00000001 DATA8}\n{8'b00001001 DATA9}\n} SEG_DATA;\n\nvirtual function {(SEG_DATA)/uut_name/signal} new_signal;\n\nadd wave -hex -color pink new_signal;
reg16=reg[15:0]
reg4=reg[3:0] 
reg8=reg[7:0] 
shixu=always@(posedge clk or negedge rst_n)begin\n    if(rst_n==1'b0)begin\n        \n    end\n    else if() begin\n        \n    end\nend
task=task name ;\n	integer i;\n	for(i=0;i< N ;i=i+1)begin		\n	\n	#(1*CYCLE);\n	\n	#(1*CYCLE);\n	end\nendtask
test=`timescale 1ns/1ns\nmodule testbench_tb ();	\n    reg clk ;\n    reg rst_n ;	\n    reg [ Width :0] din ;\n	reg	 din_vld ;\n    wire[ Width :0] dout ;\n	wire dout_vld ;\n	\n	\n    parameter CYCLE = 20 ;\n	parameter RST_TIME = 3 ;\n\n\n	\n    mudule_name  #(.parameter(a),.parameter(b) )  uut1(	\n	.clk  ( clk ),\n	.rst_n( rst_n ),\n	.din ( din ),\n	.din_vld ( din_vld ), \n	.dout ( dout ),\n	.dout_vld ( dout_vld )\n	);\n\n    initial begin\n        clk = 0;\n        forever #(CYCLE/2) clk = ~clk;\n    end\n\n    initial begin\n        rst_n=1;\n        #2;		\n		rst_n=0;\n        #(RST_TIME*CYCLE);\n		rst_n=1;\n    end\n\n	integer i;	\n	initial begin\n        #1;		\n		din=0;\n        #(4*CYCLE);\n		for(i=0;i<50;i=i+1)begin\n			din= {$random}%16;\n			#(2*CYCLE);\n		end\n    end\n\nendmodule
wire16=wire[15:0] 
wire4=wire[3:0]
wire8=wire[7:0] 
zhushi=/************************* signal *****************************/
zuhe=always@(*)begin\n    \nend
[8]
a=<a href="#" />$</a>
asdf=text from current tagggggggg
b=<b>$</b>$
body=<body>\n	$\n</body>\n$
c=<!-- $ -->$
comment=<!-- $ -->\n$
css=<link rel="stylesheet" type="text/css" href="$.css" />
cyan=#00FFFF
div=<div />$</div>
form=<form name="$" action="$">\n	$\n</form>\n$
green=#00FF00
h1=<h1>$</h1>$
h2=<h2>$</h2>$
h3=<h3>$</h3>$
h4=<h4>$</h4>$
h5=<h5>$</h5>\n$
h6=<h6>$</h6>\n$
head=<head>\n	$\n</head>\n$
html=<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n<html xmlns="http://www.w3.org/1999/xhtml">\n	<head>\n		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />\n		<title>$</title>\n		<script type="text/javascript" src="$.js"></script>\n		<link rel="stylesheet" href="$.css" /> \n		<script type="text/javascript">\n			$(document).ready(function() {\n				$\n			});	\n		</script>\n	</head>\n	<body>\n		$\n	</body>\n</html>
i=<i>$</i>$
id=id="$"
iframe=<iframe src="$" width="$" height="$" />\n$\n</iframe>
img=<img src="$" alt="$" />\n$
input=<input type="$" name="$" />\n$
js=<script src="$" type="text/javascript" /></script>
li=<li>$</li>\n$
link=<a href="$">$</a>$
mangenta=#FF00FF
ol=<ol>\n	<li>$</li>\n	$\n</ol>\n$
p=<p>$</p>$
pre=<pre>$</pre>\n$
red=#FF0000
span=<span>$</span>$
table=<table>\n	<tr>\n		<td>$</td>\n		$\n	</tr>\n	$\n</table>\n$
td=<td>$</td>\n$
title=<title>$</title>\n$
tr=<tr>\n	$\n</tr>\n$
ul=<ul>\n	<li>$</li>\n	$\n</ul>$
white=#FFFFFF
yellow=#FFFF00
{={}
